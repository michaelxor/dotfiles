#!/bin/bash

GITHUB_USER="michaelxor"
DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/${GITHUB_USER}/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:${GITHUB_USER}/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d "${DOTFILES_DIRECTORY}" ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir "${DOTFILES_DIRECTORY}"

    # Get the tarball
    curl -fsSLo "${HOME}/dotfiles.tar.gz" "${DOTFILES_TARBALL_PATH}"

    # Extract to the dotfiles directory
    tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_DIRECTORY}"

    # Remove the tarball
    rm -rf "${HOME}/dotfiles.tar.gz"
fi

cd "${DOTFILES_DIRECTORY}"

source ./lib/help
source ./lib/list
source ./lib/utils

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        --no-cask) no_cask=true ;;
        --no-node) no_node=true ;;
        --no-py) no_py=true ;;
        --no-ruby) no_ruby=true ;;
        --no-php) no_php=true ;;
        --no-tmux) no_tmux=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin "${DOTFILES_GIT_REMOTE}"
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

if [[ $no_packages ]]; then
    printf "Skipped brew package installations and updates.\n"
else
    if [[ -r "brew/install.sh" ]]; then
        printf "Updating brew packages...\n"
        cd brew
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_cask ]]; then
    printf "Skipped app installations.\n"
else
    if [[ -r "cask/install.sh" ]]; then
        printf "Updating cask apps...\n"
        cd cask
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_node ]]; then
    printf "Skipped node installations and updates.\n"
else
    if [[ -r "node/install.sh" ]]; then
        printf "Updating node packages...\n"
        cd node
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_py ]]; then
    printf "Skipped python installation and updates.\n"
else
    if [[ -r "python/install.sh" ]]; then
        printf "Updating python packages...\n"
        cd python
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_ruby ]]; then
    printf "Skipped ruby installation and updates.\n"
else
    if [[ -r "ruby/install.sh" ]]; then
        printf "Updating ruby packages...\n"
        cd ruby
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_php ]]; then
    printf "Skipped php installation and updates.\n"
else
    if [[ -r "php/install.sh" ]]; then
        printf "Updating php packages...\n"
        cd php
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

if [[ $no_tmux ]]; then
    printf "Skipped tmux installation and updates.\n"
else
    if [[ -r "tmux/install.sh" ]]; then
        printf "Updating tmux packages...\n"
        cd tmux
        source install.sh
        cd "${DOTFILES_DIRECTORY}"
    fi
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet "${DOTFILES_DIRECTORY}/git/gitconfig"  "${HOME}/.gitconfig"

    # Force remove the vim directory if it's already there.
    if [ -e "${HOME}/.vim" ]; then
        rm -rf "${HOME}/.vim"
    fi

    # Force remove the svn config if it's already there.
    if [ -e "${HOME}/.subversion/config" ]; then
        rm -rf "${HOME}/.subversion/config"
        rm -rf "${HOME}/.subversion/svn-diffwrap.sh"
    fi


    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "shell/bashrc"        ".bashrc"
    link "shell/bash_profile"  ".bash_profile"
    link "shell/curlrc"        ".curlrc"
    link "shell/inputrc"       ".inputrc"
    link "git/gitattributes"   ".gitattributes"
    link "git/gitignore"       ".gitignore"
    link "vim"                 ".vim"
    link "vim/gvimrc"          ".gvimrc"
    link "vim/vimrc"           ".vimrc"
    link "svn/config"          ".subversion/config"
    link "bin/svn-diffwrap.sh" ".subversion/svn-diffwrap.sh"

    # load up any component-based config files
    IFS=$'\n'
    for file in $(find "$HOME/.dotfiles" \( -d 1 -iname "*.symlink" -or -d 2 -iname "*.symlink" \)); do
        if [[ -r "$file" ]]; then
            if [[ $no_node && $file == *"node/"* ]]; then
                continue
            fi
            if [[ $no_ruby && $file == *"ruby/"* ]]; then
                continue
            fi
            if [[ $no_py && $file == *"python/"* ]]; then
                continue
            fi
            if [[ $no_php && $file == *"php/"* ]]; then
                continue
            fi
            if [[ $no_tmux && $file == *"tmux/"* ]]; then
                continue
            fi

            # get the relative path for this file
            rel_file="${file##$HOME/.dotfiles/}"

            # get the basename for the symlink
            link_name="${file##*/}"
            link_name="${link_name%.*}"

            # link!
            link "$rel_file" "$link_name"
        fi
    done

    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
    source ${HOME}/.bash_profile
else
    printf "Aborting...\n"
    exit 1
fi


# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi
