#!/bin/bash

# Header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if $(brew list $1 >/dev/null); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

# Test whether a Homebrew Cask app is already installed
# $1 - app name (may include options)
app_exists() {
    # unfortunately we can't trust the exit status of brew cask
    # like we can for brew above. we'll have to capture stdout
    # and check against that instead
    success=$(brew cask list $1)
    if [[ $success ]]; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing app: $1"
    return 1
}

pypackage_exists() {
    success=$(pip freeze | grep -e "^${1}==")
    if [[ $success ]]; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing package: $1"
    return 1
}

gem_exists() {
    success=$(gem list --local | grep -e "^$1")
    if [[ $success ]]; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing gem: $1"
    return 1
}

noout() {
    "$@" >/dev/null 2>&1
}
